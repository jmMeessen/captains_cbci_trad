---

#Jenkins_node_type is defined in the calling playbook
- name: "Include the 'CJOC' installation specific variables" 
  include_vars: "cjoc.yml"

- name: Create some useful aliases on the default (ubuntu user)
  template: 
    src: "bash_aliases.j2"
    dest: "/home/ubuntu/.bash_aliases"
    force: yes
    mode: u=rw,g=r,o=r  

  #Proceeding this way is important so that the noWizard parameter works properly
- name: Copy the initial configuration before first startup (CJOC)
  become: true
  ansible.builtin.copy:
    src: "{{ package_name }}"
    dest: "/etc/default/{{ package_name }}"
    force: no
    backup: yes
    owner: "root"
    group: "root"
    mode: u=rw,g=r,o=r

- name: Add the {{ option_friendly_name }} APT Key
  become: true
  apt_key:
    url: "{{ key_url }}"
    state: present

- name: Add the {{ option_friendly_name }} package repository
  become: true
  apt_repository:
    repo: "{{ repo_url }}"
    state: present


# To force a particular version:  "{{ package_name }}=2.138.3.1"
- name: Install {{ option_friendly_name }}
  become: true
  apt:
    update_cache: yes
    name: "{{ package_name }}"

- name: create the init.groovy.d directory
  become: true
  file:
    path: "/var/lib/{{ jenkins_user }}/init.groovy.d"
    state: directory
    owner: "{{ jenkins_user }}"
    group: "{{ jenkins_user }}"
    mode: "u=rwx,g=rx,o=rx"

- name: copy the "init start" semaphore script
  become: true
  copy: 
    src: "set_init_semaphore.groovy"
    dest: "{{ jenkins_home_dir }}/init.groovy.d/000-set_init_semaphore.groovy"
    force: yes
    owner: "{{ jenkins_user }}"
    group: "{{ jenkins_user }}"
    mode: u=rw,g=r,o=r   

- name: copy the init end semaphore script
  become: true
  copy: 
    src: "delete_init_semaphore.groovy"
    dest: "{{ jenkins_home_dir }}/init.groovy.d/999-delete_init_semaphore.groovy"
    force: yes
    owner: "{{ jenkins_user }}"
    group: "{{ jenkins_user }}"
    mode: u=rw,g=r,o=r   

- name: Prepare everything to load the license on CJOC
  include_tasks: 00_load-license.yml

- name: Load initial user creation and security settings
  include_tasks: 01_initial_jenkins_config.yml


#
# Restart server to load the properties and execute the initscripts
#

- name: restart the {{ package_name }} service 
  become: true
  service:
    name: "{{ package_name }}"
    state: restarted

- name: wait for jenkins to be up
  uri: 
    url: "{{ cjoc_url }}/login" 
    status_code: "200" 
  register: result
  until: result.status == 200
  retries: 60
  delay: 1


#
# Setup everything required to use the CLI
#
- name: Wait for the init scripts to complete
  wait_for:
    path: /var/lib/cloudbees-core-oc/init_semaphore.txt
    state: absent

- name: Call configCLI playbook
  include_tasks: 02_configCLI.yml

# apply the scripted configuration

- name: Install default plugins
  ansible.builtin.command: "{{ CLI_command }} install-plugin {{ item }} -deploy"
  loop: "{{ default_plugins }}"

- name: Enable LDAP
  # Now that the LDAP plugin is installed, we can configure it
  include_tasks: 03_enable-LDAP.yml

- name: setup CJOC security
  include_tasks: 04_setup_CJOC_security.yml

- name: Copy the CasC bundles
  include_tasks: CasC_bundle.yml

- name: create the Client Master
  include_tasks: 05_create-client-master.yml

# - name: copy plugin catalogs
#   include_tasks: plugin-catalog.yml
#   when: jenkins_node_type is search("cjoc")

- name: Loading github API token
  set_fact:
    github_token: "{{ lookup('env','GITHUB_TOKEN') }}"

- name: create the XML file
  set_fact:
    rendered_template: "{{ lookup('template', 'github_token.xml.j2') }}"

- name: add the Github API token as a credential
  ansible.builtin.shell: "echo '{{ rendered_template }}' | {{ CLI_command }} create-credentials-by-xml system::system::jenkins _ "
  register: add_github_token
  failed_when: add_github_token.rc > 1
